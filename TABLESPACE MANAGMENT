TO KNOW DIRECTORY STATUS:-
-------------------------

set lines 150 pages 150;
col OWNER for a30;
col DIRECTORY_NAME for a30;
col DIRECTORY_PATH for a30;
select owner,DIRECTORY_NAME,DIRECTORY_PATH from dba_directories;

CREATE OR REPLACE DIRECTORY DATAPUMP_BAWDB AS '/u02/DATAPUMP_BAWDB';


------------------------------------------------------------

TO KNOW USER STATUS:-
---------------------
set pages 200;
select username from all_users;

CHECK ALL TABLE_SPACES AVAILABLE:-
------------------------------------
SET LINESIZE 200:
SELECT tablespace_name,
       block_size,
       extent_management,
       segment_space_management,
       status
FROM   dba_tablespaces
ORDER BY tablespace_name;


CHECK FREE SPACE:-
----------------------------------

SET PAGESIZE 140 LINESIZE 200;
SELECT tablespace_name,
       size_mb,
       free_mb,
       max_size_mb,
       max_free_mb,
       TRUNC((max_free_mb/max_size_mb) * 100) AS free_pct,
       ROUND((max_size_mb-max_free_mb)/max_size_mb*10,2) AS used_pct
FROM   (
        SELECT a.tablespace_name,
               b.size_mb,
               a.free_mb,
               b.max_size_mb,
               a.free_mb + (b.max_size_mb - b.size_mb) AS max_free_mb
        FROM   (SELECT tablespace_name,
                       TRUNC(SUM(bytes)/1024/1024) AS free_mb
                FROM   dba_free_space
                GROUP BY tablespace_name) a,
               (SELECT tablespace_name,
                       TRUNC(SUM(bytes)/1024/1024) AS size_mb,
                       TRUNC(SUM(GREATEST(bytes,maxbytes))/1024/1024) AS max_size_mb
                FROM   dba_data_files
                GROUP BY tablespace_name) b
        WHERE  a.tablespace_name = b.tablespace_name
       ) 
	   --where tablespace_name = 'USERS'
ORDER BY tablespace_name;


CHECK ALL THE DATAFILE OF A TABLESPACE:-
----------------------------------------------

	COLUMN file_name FORMAT A40;
	SELECT file_id,
		   file_name,
		   ROUND(bytes/1024/1024) AS size_mb,
		   ROUND(maxbytes/1024/1024) AS max_size_mb,
		   autoextensible,
		   increment_by,
		   status
	FROM   dba_data_files
	WHERE  tablespace_name = 'SGALHTT1'
	ORDER BY file_id;



--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------
21)	TO CHECK THE TABLESPACE USAGE:-
----------------------------------

TO KNOW TABLESPACE USAGE IN MB:-
------------------------------
SELECT
    df.tablespace_name AS "Tablespace",
    df.bytes / (1024 * 1024) AS "Size_MB",
    (df.bytes - NVL(fs.bytes, 0)) / (1024 * 1024) AS "Used_MB",
    NVL(fs.bytes, 0) / (1024 * 1024) AS "Free_MB",
    ROUND(((df.bytes - NVL(fs.bytes, 0)) / df.bytes) * 100, 2) AS "Pct_Used"
FROM
    (SELECT tablespace_name, SUM(bytes) AS bytes
     FROM dba_data_files
     GROUP BY tablespace_name) df,
    (SELECT tablespace_name, SUM(bytes) AS bytes
     FROM dba_free_space
     GROUP BY tablespace_name) fs
WHERE
    df.tablespace_name = fs.tablespace_name(+)
ORDER BY
    "Pct_Used" DESC;
	
	
-----------------------------------------------------------------------------------------------------------
TO KNOW TABLESPACE USAGE IN GB:-
------------------------------
SELECT
    df.tablespace_name AS "Tablespace",
    df.bytes / (1024 * 1024 * 1024) AS "Size_GB",
    (df.bytes - NVL(fs.bytes, 0)) / (1024 * 1024 * 1024) AS "Used_GB",
    NVL(fs.bytes, 0) / (1024 * 1024 * 1024) AS "Free_GB",
    ROUND(((df.bytes - NVL(fs.bytes, 0)) / df.bytes) * 100, 2) AS "Pct_Used"
FROM
    (SELECT tablespace_name, SUM(bytes) AS bytes
     FROM dba_data_files
     GROUP BY tablespace_name) df,
    (SELECT tablespace_name, SUM(bytes) AS bytes
     FROM dba_free_space
     GROUP BY tablespace_name) fs
WHERE
    df.tablespace_name = fs.tablespace_name(+)
ORDER BY
    "Pct_Used" DESC;


-----------------------------------------------------------------------------------------------------------
TO KNOW EACH TABLESPACE USAGE IN GB:-
----------------------------------

SELECT
    df.tablespace_name AS "Tablespace",
    df.bytes / (1024 * 1024 * 1024) AS "Size_GB",
    (df.bytes - NVL(fs.bytes, 0)) / (1024 * 1024 * 1024) AS "Used_GB",
    NVL(fs.bytes, 0) / (1024 * 1024 * 1024) AS "Free_GB",
    ROUND(((df.bytes - NVL(fs.bytes, 0)) / df.bytes) * 100, 2) AS "Pct_Used"
FROM
    (SELECT tablespace_name, SUM(bytes) AS bytes
     FROM dba_data_files
     WHERE tablespace_name = 'FOMLHTT1'
     GROUP BY tablespace_name) df,
    (SELECT tablespace_name, SUM(bytes) AS bytes
     FROM dba_free_space
     WHERE tablespace_name = 'USERS'
     GROUP BY tablespace_name) fs
WHERE
    df.tablespace_name = fs.tablespace_name(+)
ORDER BY
    "Pct_Used" DESC;
	
	
-----------------------------------------------------------------------------------------------------------
set pages 200;
select  round(sum(bytes)/1024/1024/1024,2) Gbytes_used,round(sum(MAXBYTES)/1024/1024/1024,2) Gbytes_alloc
,tablespace_name--,round((sum(bytes)/sum(maxbytes))*100,2) pct
from dba_data_files where tablespace_name not like '%UNDO%' group by  tablespace_name order by 1 desc;  

-----------------------------------------------------------------------------------------------------------

set linesize 3000 
column dummy noprint
column  pct_used format 999.9       heading "%|Used"
column  name    format a19      heading "Tablespace Name"
column  Kbytes   format 999,999,999    heading "MBytes"
column  used    format 999,999,999   heading "Used"
column  free    format 999,999,999  heading "Free"
column  largest    format 999,999,999  heading "Largest"
column  max_size format 999,999,999 heading "MaxPoss|Mbytes"
column  pct_max_used format 999.9       heading "%|Max|Used"
break   on report
compute sum of kbytes on report
compute sum of free on report
compute sum of used on report
select (select decode(extent_management,'LOCAL','*',' ')
          from dba_tablespaces where tablespace_name = b.tablespace_name) ||
nvl(b.tablespace_name,
             nvl(a.tablespace_name,'UNKOWN')) name,
       kbytes_alloc kbytes,
       kbytes_alloc-nvl(kbytes_free,0) used,
       nvl(kbytes_free,0) free,
       ((kbytes_alloc-nvl(kbytes_free,0))/
                          kbytes_alloc)*100 pct_used,
       nvl(largest,0) largest,
       nvl(kbytes_max,kbytes_alloc) Max_Size,
       decode( kbytes_max, 0, 0, (kbytes_alloc/kbytes_max)*100) pct_max_used
from ( select sum(bytes)/1024/1024 Kbytes_free,
              max(bytes)/1024/1024 largest,
              tablespace_name
       from  sys.dba_free_space
       group by tablespace_name ) a,
     ( select sum(bytes)/1024/1024 Kbytes_alloc,
              sum(maxbytes)/1024/1024 Kbytes_max,
              tablespace_name
       from sys.dba_data_files
       group by tablespace_name
       union all
      select sum(bytes)/1024/1024 Kbytes_alloc,
              sum(maxbytes)/1024/1024 Kbytes_max,
              tablespace_name
       from sys.dba_temp_files
       group by tablespace_name )b
where a.tablespace_name (+) = b.tablespace_name
order by 5;

-------------------------------------------------------------------------------------------------------------
SET LINESIZE 200 pages 200;
SELECT tablespace_name,
       block_size,
       extent_management,
       segment_space_management,
       status
FROM   dba_tablespaces
ORDER BY tablespace_name;



SQL> 
col FILE_NAME for a55;
set lines 200 pages 200;
SELECT file_id,file_name, ROUND(bytes/1024/1024) AS size_mb,ROUND(maxbytes/1024/1024) AS max_size_mb,autoextensible,increment_by,status FROM   dba_data_files WHERE  tablespace_name = 'USERS';


------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------

DDL ON TABLESPACE:

--Create TABLESPACE
Create tablespace HRMS_TS datafile '+DATA01/BAWSTG/DATAFILE/HRMS_001.dbf' size 500M autoextend on NEXT 10M MAXSIZE UNLIMITED EXTENT MANAGEMENT LOCAL SEGMENT SPACE MANAGEMENT AUTO ;

-- Add a datafile to a tablespace
Alter tablespace HRMS_TS add datafile '+DATA01/BAWSTG/DATAFILE/HRMS_002.dbf'  size 900M autoextend on;

-- Resize a datafile
alter database datafile '+DATA01/BAWSTG/DATAFILE/HRMS_001.dbf' AUTOEXTEND ON MAXSIZE UNLIMITED;

alter database datafile '+DATA01/BAWSTG/DATAFILE/HRMS_001.dbf' resize 150M;

-- Make a datafile offline/online

Alter database datafile '+DATA01/BAWSTG/DATAFILE/HRMS_001.dbf' offline;

Alter database datafile '+DATA01/BAWSTG/DATAFILE/HRMS_002.dbf' online;

-- Drop a datafile:

Alter tablespace USERS drop datafile '+DATA/ORADB/DATAFILE/users.279.1102165131';

-- Drop a tablespace without removing the physical database files.

drop tablespace TESTING;
Tablespace dropped.

select file_name from dba_data_files where tablespace_name='TESTING';

no rows selected

-- Drop tablespace including the physical datafiles.

drop tablespace HRMS_TS including contents and datafiles;
Tablespace dropped.

--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------


### 1. Creating a Tablespace
To create a new tablespace in an Oracle RAC database, you can use the following script:
 
CREATE TABLESPACE my_tablespace
DATAFILE '/u02/app/oracle/oradata/ORCL/my_tablespace01.dbf' SIZE 100M
AUTOEXTEND ON NEXT 10M MAXSIZE UNLIMITED
EXTENT MANAGEMENT LOCAL
SEGMENT SPACE MANAGEMENT AUTO;
 
### 2. Adding a Datafile to a Tablespace
If you need to add a new datafile to an existing tablespace, use the following script:
 
ALTER TABLESPACE my_tablespace
ADD DATAFILE '/u01/app/oracle/oradata/ORCL/my_tablespace02.dbf' SIZE 100M
AUTOEXTEND ON NEXT 10M MAXSIZE UNLIMITED;
 
### 3. Resizing a Datafile
To resize an existing datafile, you can use this script:
 
ALTER DATABASE DATAFILE '/u01/app/oracle/oradata/ORCL/my_tablespace01.dbf' RESIZE 500M;
 
### 4. Taking a Tablespace Offline
To take a tablespace offline for maintenance, you can use:
 
ALTER TABLESPACE my_tablespace OFFLINE;
 
### 5. Bringing a Tablespace Online
To bring a tablespace back online, use the following script:
 
ALTER TABLESPACE my_tablespace ONLINE;
 
### 6. Dropping a Tablespace
To drop a tablespace and its contents, including datafiles, use this script:
 
DROP TABLESPACE my_tablespace INCLUDING CONTENTS AND DATAFILES;
 
### 7. Monitoring Tablespace Usage
To monitor the usage of tablespaces, you can run a query like this:
 
SELECT
    TABLESPACE_NAME,
    FILE_NAME,
    BYTES / (1024 * 1024) AS SIZE_MB,
    MAXBYTES / (1024 * 1024) AS MAXSIZE_MB,
    AUTOEXTENSIBLE
FROM DBA_DATA_FILES
WHERE TABLESPACE_NAME = 'MY_TABLESPACE';
 
SELECT
    TABLESPACE_NAME,
    SUM(BYTES) / (1024 * 1024) AS USED_MB
FROM DBA_SEGMENTS
WHERE TABLESPACE_NAME = 'MY_TABLESPACE'
GROUP BY TABLESPACE_NAME;
 
SELECT
    TABLESPACE_NAME,
    SUM(BYTES) / (1024 * 1024) AS FREE_SPACE_MB
FROM DBA_FREE_SPACE
WHERE TABLESPACE_NAME = 'MY_TABLESPACE'
GROUP BY TABLESPACE_NAME;
 
### 8. Checking Tablespace Status in RAC
To check the status of tablespaces across RAC instances, you can use the following query:
 
SELECT
    INST_ID,
    TABLESPACE_NAME,
    STATUS
FROM GV$TABLESPACE
WHERE TABLESPACE_NAME = 'MY_TABLESPACE';
 
### 9. Enabling Autoextend for Datafiles
To enable autoextend for a specific datafile:
 
ALTER DATABASE DATAFILE '/u01/app/oracle/oradata/ORCL/my_tablespace01.dbf' AUTOEXTEND ON NEXT 10M MAXSIZE UNLIMITED;
 
### 10. Disabling Autoextend for Datafiles
To disable autoextend for a specific datafile:
 
ALTER DATABASE DATAFILE '/u01/app/oracle/oradata/ORCL/my_tablespace01.dbf' AUTOEXTEND OFF;
 
--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------

UNDO:-
----------

KNOW YOUR DEFAULT UNDO TABLE SPACE;
SHOW PARAMETER UNDO_TABLESPACE;
select VALUE from v$parameter where NAME='undo_tablespace';

SET UNDO_RETENTION value at any time using:-
ALTER SYSTEM SET UNDO_RETENTION = 2400;

CREATING UNDO TS:-
CREATE UNDO TABLESPACE undotbs_02 DATAFILE '/u01/undo02.dbf' SIZE 2M REUSE AUTOEXTEND ON RETENTION NOGUARANTEE;

CHANGE UNDO TABLESPACE:-
ALTER SYSTEM SET UNDO_TABLESPACE = undotbs_02;

KNOW UNDO RETENTION:-
show parameter undo;

Enabling and disabling undo retention guarantee
ALTER TABLESPACE undotbs_02 RETENTION GUARANTEE;
ALTER TABLESPACE undotbs_02 RETENTION NOGUARANTEE;

CHECK IF YOUR UNDO HAS GUATENTEED RETENTION:-
select tablespace_name ,retention from dba_tablespaces where contents = 'UNDO';

--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------

TEMP :-
-------

SET LINESIZE 255

COLUMN tablespace_name FORMAT A20
COLUMN file_name FORMAT A40

SELECT tf.tablespace_name,
       tf.file_name,
       tf.size_mb,
       f.free_mb,
       tf.max_size_mb,
       f.free_mb + (tf.max_size_mb - tf.size_mb) AS max_free_mb,
       RPAD(' '|| RPAD('X',ROUND((tf.max_size_mb-(f.free_mb + (tf.max_size_mb - tf.size_mb)))/max_size_mb*10,0), 'X'),11,'-') AS used_pct
FROM   (SELECT file_id,
               file_name,
               tablespace_name,
               TRUNC(bytes/1024/1024) AS size_mb,
               TRUNC(GREATEST(bytes,maxbytes)/1024/1024) AS max_size_mb
        FROM   dba_temp_files) tf,
       (SELECT TRUNC(SUM(bytes)/1024/1024) AS free_mb,
               file_id
        FROM dba_free_space
        GROUP BY file_id) f
WHERE  tf.file_id = f.file_id (+)
ORDER BY tf.tablespace_name,
         tf.file_name;

CHECK TEMPFILE DETAILS:
	 
SET LINESIZE 200;
COLUMN file_name FORMAT A70;
SELECT TABLESPACE_NAME,
		file_id,
       file_name,
       ROUND(bytes/1024/1024/1024) AS size_gb,
       ROUND(maxbytes/1024/1024/1024) AS max_size_gb,
       autoextensible,
       increment_by,
       status
FROM   dba_temp_files
ORDER BY file_name;

CREATE TEMP TABLESPACE

CREATE TEMPORARY TABLESPACE TEMP_NEW TEMPFILE '/DATA/database/ifsprod/temp_01.dbf' SIZE 500m autoextend on next 10m maxsize unlimited;

ALTER DATABASE DEFAULT TEMPORARY TABLESPACE TEMP_NEW;

select property_name,property_value from database_properties where property_name like '%DEFAULT%';

ALTER TABLESPACE TEMP ADD TEMPFILE '+DATAC1' SIZE 10G AUTOEXTEND ON NEXT 1G MAXSIZE 32767M;

who are using old temporary tablespace ( i.e. TEMP ) and kill them.

SELECT b.tablespace,b.segfile#,b.segblk#,b.blocks,a.sid,a.serial#,
a.username,a.osuser, a.status
FROM v$session a,v$sort_usage b
WHERE a.saddr = b.session_addr;

get DDL of tablespace

set heading off;
set echo off;
Set pages 999;
set long 90000;
spool ddl_tablespace.sql
select dbms_metadata.get_ddl('TABLESPACE',tb.tablespace_name) from dba_tablespaces tb;
spool off


--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------

TO RESIZE OF DATAFILE :-
-------------------------
set lines 199 pages 199;
col TABLE_NAME for a20;
col OWNER for a20;
select * from (
select owner,table_name,round((blocks*8/1024/1024),2) "size (gb)" ,
round((num_rows*avg_row_len/1024/1024/1024),2) "actual_data (gb)",
(round((blocks*8/1024/1024),2) - round((num_rows*avg_row_len/1024/1024/1024),2)) "wasted_space (gb)", ((round((blocks * 8/1024/1024), 2) - round((num_rows * avg_row_len /1024/1024/1024), 2)) /
round((blocks * 8/1024/1024), 2)) * 100 - 10 "reclaimable space % "
from dba_tables
where owner not in ('SYS') and (round((blocks*8/1024/1024),2) > round((num_rows*avg_row_len/1024/1024/1024),2))
order by 5 desc ) where rownum < 100;

--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------


with
hwm as (
  select /*+ materialize */ ktfbuesegtsn ts#,ktfbuefno relative_fno,max(ktfbuebno+ktfbueblks-1) hwm_blocks
  from sys.x$ktfbue group by ktfbuefno,ktfbuesegtsn
),
hwmts as (
  select name tablespace_name,relative_fno,hwm_blocks
  from hwm join v$tablespace using(ts#)
),
hwmdf as (
  select file_name,nvl(hwm_blocks*(bytes/blocks),5*1024*1024) hwm_bytes,bytes,autoextensible,maxbytes
  from hwmts right join dba_data_files using(tablespace_name,relative_fno)
)
select
case when autoextensible='YES' and maxbytes>=bytes
then
  '/* reclaim '||to_char(ceil((bytes-hwm_bytes)/1024/1024),999999)
   ||'M from '||to_char(ceil(bytes/1024/1024),999999)||'M */ '
   ||'alter database datafile '''||file_name||''' resize '||ceil(hwm_bytes/1024/1024)||'M;'
else
  '/* reclaim '||to_char(ceil((bytes-hwm_bytes)/1024/1024),999999)
   ||'M from '||to_char(ceil(bytes/1024/1024),999999)
   ||'M after setting autoextensible maxsize higher than current size for file '
   || file_name||' */'
end SQL
from hwmdf
where bytes-hwm_bytes>1024*1024
order by bytes-hwm_bytes desc;
--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------


